@page "/products"
@inject SuppliersApiClient Api
@using SuppliersPortal.Models

<h3>Produtos</h3>

@if (productDtos is null)
{
    <p><em>Carregando produtos...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Descrição</th>
                <th>Preço</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in productDtos)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>@p.Description</td>
                    <td>@p.UnitPrice.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>

    <h4 class="mt-4">Novo produto</h4>
    <div class="row">
        <div class="col-md-3"><input class="form-control" placeholder="Nome" @bind="NewProduct.Name" /></div>
        <div class="col-md-3"><input class="form-control" placeholder="Descrição" @bind="NewProduct.Description" /></div>
        <div class="col-md-3"><input type="number" step="0.01" class="form-control" placeholder="Preço" @bind="NewProduct.Price" /></div>
        <div class="col-md-3">
            <button class="btn btn-success w-100" @onclick="AddProduct">Adicionar</button>
        </div>
    </div>
}

@code {
    private List<ProductDto>? productDtos;
    private CreateProductRequest NewProduct = new();

    protected override async Task OnInitializedAsync()
    {
        productDtos = (await Api.GetProductsAsync()).ToList();
    }

    private async Task AddProduct()
    {
        var created = await Api.CreateProductAsync(NewProduct);
        if (created != null)
        {
            productDtos!.Add(created);
            NewProduct = new();
        }
    }
}
